# -*- coding: utf-8 -*-
"""EDA Youtube Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JlocWt8TKIEgnyCC-eYV8z-CpUC-KC1f

###  **Python pandas learning EDA project 'YouTube channel Analysis'**

1. Importing Libraries like pandas,numpy,seaborn.
2. Reading dataset and Loading in data variable.
3. Display All Rows Except the Last 5 rows Using Head Method.
4. Display All Rows Except the First 5 Rows Using Tail Method
5. Find the Shape of Our Dataset (Number of Rows And Number of Columns)
6. Get Information About Our Dataset Like Total Number Rows, Total Number of Columns, Datatypes of Each Column And Memory Requirement
7. Get Overall Statistics About The Dataframe
8. Data Cleaning (Replace '--' to NaN)
9. Check Null Values In The Dataset
10. Drop Null Values In The Dataset
11. Data Cleaning [ Rank Column ]
12. Data Cleaning [ Video Uploads & Subscribers ]
13. Data Cleaning [ Grade Column ]
14. Find Average Views For Each Channel
15. Find Out Top Five Channels With Maximum Number of Video Uploads
16. Find Correlation Matrix
17. Which Grade Has A Maximum Number of Video Uploads?
18. Which Grade Has The Highest Average Views?
19. Which Grade Has The Highest Number of Subscribers?
20. Which Grade Has The Highest Video Views?
"""

# 1.Importing Libraries like pandas,numpy,seaborn.
import pandas as pd
import numpy as np
import seaborn as sns

# 2.Reading dataset and Loading in data variable.
data = pd.read_csv("top-5000-youtube-channels.csv")
data

# 3.Display All Rows Except the Last 5 rows Using Head Method.
data.head(-5)

# 4.Display All Rows Except the First 5 Rows Using Tail Method
data.tail(-5)

# 5.Find the Shape of Our Dataset (Number of Rows And Number of Columns)
data.shape
print("Rows",data.shape[0])
print("Columns",data.shape[1])

# 6.Get Information About Our Dataset Like Total Number Rows, Total Number of Columns, Datatypes of Each Column And Memory Requirement
data.info()

# 7.Get Overall Statistics About The Dataframe (These Functions performs only on numerical columns)
data.describe()

data.head(20)

# 8.Data Cleaning (Replace '--' to NaN)
data = data.replace("--",np.nan,regex=True)

data.head(20)

# 9.Check Null Values In The Dataset
data.isnull().sum()

per_missing = data.isnull().sum()/len(data)*100
per_missing

sns.heatmap(data.isnull())

# 10.Check and Drop Null Values In The Dataset
data.dropna(axis=0,inplace = True)

data.isnull().sum()

sns.heatmap(data.isnull())

data.head()

data.tail()

# 11.Data Cleaning [ Rank Column ]
data["Rank"] = data["Rank"].str[0:-2]

data.tail()

data["Rank"] = data["Rank"].str.replace(",","").astype("int")

data.tail(5)

# 12.Data Cleaning [ Video Uploads & Subscribers ]
data["Video Uploads"] = data["Video Uploads"].astype("int")

data["Subscribers"] = data["Subscribers"].astype("int")

# Shows Unique Values in Grade Column
data["Grade"].unique()

# Declaring Dictionary keys and values pair
dic = {'A++ ':5, 'A+ ':4, 'A ':3, 'A- ':2, 'B+ ':1}

# 13.Data Cleaning [ Grade ]
data["Grade"] = data["Grade"].map(dic)

data.info()

data.head()

# 14.Find Average Views For Each Channel
data["Avg_Views"] = round(data["Video views"]/data["Video Uploads"])

data.head()

# 15.Find Out Top Five Channels With Maximum Number of Video Uploads
data.sort_values(by="Video Uploads",ascending=False).head()

# 16.Find Correlation Matrix
df = pd.DataFrame(data)
numeric_columns = df.select_dtypes(include="int")
Coorelation_matrix = numeric_columns.corr()
Coorelation_matrix

data.columns

# 17.Which Grade Has A Maximum Number of Video Uploads?
sns.barplot(x='Grade',y='Video Uploads',data=data)

# 18.Which Grade Has The Highest Average Views?
sns.barplot(x='Grade',y='Avg_Views',data=data)

# 19.Which Grade Has The Highest Number of Subscribers?
sns.barplot(x='Grade',y='Subscribers',data=data);

# 20.Which Grade Has The Highest Video Views?
sns.barplot(x='Grade',y='Video views',data=data)